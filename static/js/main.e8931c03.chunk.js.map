{"version":3,"sources":["assets/images/hollowHornet.png","assets/images/hollowSilk.png","assets/images/hollowKnight.png","assets/images/hollowBoss.png","assets/images/hollowZaza.png","assets/images/hollowLace.png","assets/images/hollowZote.png","assets/images/hollowMerchant.png","assets/images/hollowQuirrel.png","assets/images/hollowHat.png","assets/images/hollowSentry.png","assets/images/hollowMato.png","components/Header/header.js","components/imageContainer/imageContainer.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","message","score","highScore","ImageContainer","images","array","temp","index","counter","length","Math","floor","random","shuffle","key","id","src","require","onClick","handleImageClick","alt","Footer","App","state","selectedID","event","imageID","target","_this","includes","setState","push","header","this","imageContainer","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8931c03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hollowHornet.009f83fa.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowSilk.46045af4.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowKnight.b8b65aa7.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowBoss.78e564e5.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowZaza.c663f3c7.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowLace.2ec6a771.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowZote.7b8d3406.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowMerchant.1897d213.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowQuirrel.ec741dc2.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowHat.c0c17425.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowSentry.6cf28563.png\";","module.exports = __webpack_public_path__ + \"static/media/hollowMato.9a60a831.png\";","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction Header(props){\r\n    return(\r\n        <div className=\"container-fluid\">\r\n            <div className=\"jumbotron\">\r\n                <h1>Welcome to the Hollow Knight Clicky-Game!</h1>\r\n                <hr></hr>\r\n                <h2>{props.message}</h2>\r\n                <h3>Score {props.score}| High Score {props.highScore}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\n function ImageContainer (props){ \r\n   \r\n    // Images array with their onclick functions\r\n    const array = [\r\n    <img key=\"1\" id=\"1\" src={require(`../../assets/images/hollowHornet.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hh\"/>,\r\n    <img key=\"2\" id=\"2\" src={require(`../../assets/images/hollowSilk.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hs\"/>,\r\n    <img key=\"3\" id=\"3\" src={require(`../../assets/images/hollowKnight.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hk\"/>,\r\n    <img key=\"4\" id=\"4\" src={require(`../../assets/images/hollowBoss.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hb\"/>,\r\n    <img key=\"5\" id=\"5\" src={require(`../../assets/images/hollowZaza.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hz\"/>,\r\n    <img key=\"6\" id=\"6\" src={require(`../../assets/images/hollowLace.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hl\"/>,\r\n    <img key=\"7\" id=\"7\" src={require(`../../assets/images/hollowZote.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hzo\"/>,\r\n    <img key=\"8\" id=\"8\" src={require(`../../assets/images/hollowMerchant.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hm\"/>,\r\n    <img key=\"9\" id=\"9\" src={require(`../../assets/images/hollowQuirrel.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hq\"/>,\r\n    <img key=\"10\" id=\"10\" src={require(`../../assets/images/hollowHat.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hha\"/>,\r\n    <img key=\"11\" id=\"11\" src={require(`../../assets/images/hollowSentry.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hs\"/>,\r\n    <img key=\"12\" id=\"12\" src={require(`../../assets/images/hollowMato.png`)} onClick={props.handleImageClick} className=\"img-thumbnail\" alt=\"hma\"/>];\r\n    \r\n    // Function to Shuffle IMG Array once an IMG is clicked\r\n    function shuffle(array) {\r\n\r\n        let counter = array.length;\r\n        let temp;\r\n        let index;\r\n\r\n        while(counter > 0) {\r\n            index = Math.floor(Math.random() * counter);\r\n            counter--;\r\n            temp = array[counter];\r\n            array[counter] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    let images = shuffle(array);\r\n\r\n    return(\r\n        <main className=\"images\">\r\n            <div className=\"container-fluid\">\r\n                {images}\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default ImageContainer;","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer className=\"py-5 bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <p className=\"m-0 text-center text-white\">Copyright &copy; Albert Schumacher 2019</p>\r\n        </div>\r\n      </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/header';\nimport ImagesContainer from './components/imageContainer/imageContainer';\nimport Footer from \"./components/Footer/footer\";\n\n\n\nclass App extends Component {\n  // We set the variables that change during the game as states\n  state = {\n    score : 0,\n    highScore: 0,\n    selectedID: [],\n    message: \"Click on the Characters below to earn points, but don't click any of them twice or you LOSE!\"\n  }\n  \n  // Image handler function\n  handleImageClick = event => {\n    \n    // Clicked Image variable\n    const imageID = event.target.id;\n\n    //Condition for when same image is clicked multiple times\n    if (this.state.selectedID.includes(imageID)) {\n      this.setState({\n        score: 0, \n        selectedID: [],\n        message: \"Oops! You had already picked that character...Try again!\",\n      });\n\n    } else {\n      // When image is clicked for first time, its ID gets pushed to imageID array\n      this.state.selectedID.push(imageID);\n\n      // Condition to update high score if current score is greater than high score. A\n      if (this.state.highScore <= this.state.score) {\n        this.setState({\n          highScore: this.state.score + 1,\n          message: \"Click on the Characters below to earn points, but don't click any of them twice or you LOSE!\",\n          score: this.state.score + 1\n        })\n      } else {\n        this.setState({\n          message: \"Oops! You had already picked that character...Try again!\",\n          score: this.state.score + 1\n        })\n      }\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <Header message = {this.state.message} score = {this.state.score} highScore = {this.state.highScore}/>\n        <ImagesContainer handleImageClick = {this.handleImageClick}/>\n        <Footer />\n      </div>\n    );\n  }\n \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}